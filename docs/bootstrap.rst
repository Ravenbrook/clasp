=======================
Clasp Bootstrap Process
=======================

:Author: Richard Brooksby <rb@ravenbrook.com>
:Organization: Ravenbrook Limited <http://www.ravenbrook.com/>
:Date: 2016-03-10
:Project: Clasp <https://clasp-developers.github.io/>
:Copyright: See licenses directory in project root.


Introduction
------------

.intro: This is an overview of the Clasp bootstrapping process: the
means by which a full Clasp Common Lisp is created starting with Clang
and LLVM.


Process
-------

1. A C++ Lisp interpreter ("the interpreter") is compiled using Clang to create the "clasp" executable.

2. The interpreter loads the Lisp files listed in ``*init-files*`` in
   src/lisp/kernel/init.lsp a far as the ``:min`` keyword.  This is
   Lisp Compiler “A” (which is not a full Common Lisp).  The
   interpreter then compiles its source files on disk.  As it does this, it
   replaces its own definitions with the compiled code, becoming
   incrementally faster.

3. The compiled files from step 2 are linked into a dynamic library 
   called "Aclasp image" -- a dynamic library that can be loaded into the Clang
   compiled executable "clasp" to load the compiler A.

4. Aclasp then loads and in memory compiles the Lisp files listed in
   ``*init-files*`` as far as the ``:all`` keyword. It then compiles the same
   Lisp source files to disk. This is a Lisp
   Compiler “B” (which is a full Common Lisp including CLOS).

5. The compiled files from step 4 are linked into a dynamic library image
   called “Bclasp” -- an executable compiled version of compiler B
   (but compiled with compiler A).

6. Bclasp then compiles into memory the files listed in
   src/lisp/kernel/cleavir-system.lsp.  (This list is generated by a
   dump from ASDF whenever Cleavir is imported into the project.)
   This is Lisp compiled “C” (Cleavir).  Cleavir is a good quality
   compiler, but at this stage it has been compiled with compiler “B”
   so it runs slowly.

7. Bclasp then invokes the Cleavir compiler to compile to disk everything so far from
   ``*init-files*`` and cleavir-system.lsp.

8. The compiled files from step 7 are linked into a new dynamic library image
   called “Cclasp” -- a dynamic library of compiler C compiled with
   compiler C (compiled with compiler B).

At this point, Cclasp *should* be complete.  An extra validation step
would be to recompile everything with Cclasp and check that the binary
results were the same as step 7.


Notes
-----

1. The garbage collector is linked into all the stages listed in the
   process, and affects every one of them.

2. Bitcode generated by compiling src/llvmo/intrinsics.cc is inlined into
   the results of compiling files to disk and the bitcode from compiling
   src/llvmo/link_intrinsics.cc is linked with the results of compiling files to disk.

